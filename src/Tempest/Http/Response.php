<?php namespace Tempest\Http;

use Tempest\App;
use Tempest\Services\Twig;

/**
 * A response generated by the HTTP kernel.
 *
 * @author Marty Wallace
 */
class Response extends Message {

	/** @var string */
	private $_body = '';

	/** @var int */
	private $_status = Status::OK;

	/** @var string */
	private $_contentType = 'text/plain';

	/**
	 * @return static
	 */
	public static function make() {
		return new static();
	}

	/**
	 * Sets the response body.
	 *
	 * @param string $value The response body.
	 *
	 * @return $this
	 */
	public function body($value) {
		$this->_body = $value;
		return $this;
	}

	/**
	 * Sets the response status.
	 *
	 * @param int $value The response status.
	 *
	 * @return $this
	 */
	public function status($value) {
		$this->_status = $value;
		return $this;
	}

	/**
	 * Convenience method to set the Content-Type header.
	 *
	 * @param string $value The content-type to use.
	 *
	 * @return $this
	 */
	public function contentType($value) {
		$this->_contentType = $value;

		return $this;
	}

	/**
	 * Convenience method to return the result of {@link Twig::render() rendering a Twig template}.
	 *
	 * @param string $template The template to render.
	 * @param array $context Data to provide to the rendered template.
	 *
	 * @return $this
	 */
	public function render($template, array $context = []) {
		return $this->contentType('text/html')->body(App::get()->twig->render($template, $context));
	}

	/**
	 * Convenience method to send JSON encoded representation of an array or object.
	 *
	 * @param mixed $data The data to be encoded.
	 *
	 * @return $this
	 */
	public function json($data) {
		return $this->contentType('application/json')->body(json_encode($data));
	}

	/**
	 * Send the response and {@link App::terminate() terminate} the application.
	 */
	public function send() {
		header('Content-Type: ' . $this->_contentType);
		http_response_code($this->_status);

		echo $this->_body;

		App::get()->terminate();
	}

}